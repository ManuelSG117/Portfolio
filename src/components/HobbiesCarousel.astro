---
const hobbies = [
  {
    title: "Shark Tower",
    image: "/shark_tower.webp",
    alt: "Shark Tower en una noche de cena con amigos" 
  },
  {
    title: "Church",
    image: "/church.webp",
    alt: "Catedral de Morelia de noche"
  },
  {
    title: "Sunset",
    image: "/sunset.webp",
    alt: "Atardecer en la presa de Caltzontzin"
  },
  {
    title: "Moonlight",
    image: "/moon.webp",
  alt: "Luna llena en Uruapan"
  },
];
---

<div class="w-full mt-8">
  <div class="relative w-full overflow-hidden rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 aspect-[16/9] md:aspect-[16/9] lg:aspect-[21/9]">
    <div class="flex snap-x snap-mandatory overflow-hidden h-full">
      {
        hobbies.map((hobby) => (
          <div class="snap-center shrink-0 w-full h-full">
            <div class="relative w-full h-full group">
              <img
                src={hobby.image}
                alt={hobby.alt}
                class="object-cover w-full h-full transition-transform duration-500 group-hover:scale-110 cursor-pointer"
              />
              <div class="absolute bottom-0 left-0 right-0 p-4 md:p-6 bg-gradient-to-t from-black/80 via-black/50 to-transparent">
                <h3 class="text-white text-xl md:text-2xl font-bold tracking-wide">{hobby.title}</h3>
              </div>
            </div>
          </div>
        ))
      }
    </div>

    <!-- Botones de navegación -->
    <button 
      class="absolute left-2 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/50 dark:bg-white/30 hover:bg-black/75 dark:hover:bg-white/50 transition-colors backdrop-blur-sm group"
      aria-label="Anterior imagen"
      id="prevButton"
    >
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        class="h-6 w-6 text-white group-hover:scale-110 transition-transform" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    <button 
      class="absolute right-2 top-1/2 -translate-y-1/2 p-2 rounded-full bg-black/50 dark:bg-white/30  hover:bg-black/75 dark:hover:bg-white/50 transition-colors backdrop-blur-sm group"
      aria-label="Siguiente imagen"
      id="nextButton"
    >
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        class="h-6 w-6 text-white group-hover:scale-110 transition-transform" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>

    <!-- Indicadores mejorados -->
    <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2">
      {
        hobbies.map((_, index) => (
          <button
            class="w-2 md:w-2.5 h-2 md:h-2.5 rounded-full bg-white/30 hover:bg-white/80 transition-all duration-300 hover:scale-125 backdrop-blur-sm"
            aria-label={`Ir a imagen ${index + 1}`}
            data-index={index}
          />
        ))
      }
    </div>
  </div>
</div>

<div id="lightbox" class="fixed inset-0 bg-black/95 hidden items-center justify-center z-50 backdrop-blur-sm transition-all duration-300 opacity-0">
  <div class="relative max-w-7xl mx-auto p-4 w-full">
    <button 
      id="closeLightbox" 
      class="absolute -top-2 -right-2 p-2 text-white hover:text-gray-300 bg-black/50 rounded-full backdrop-blur-sm transition-all duration-300 hover:scale-110 z-10"
      aria-label="Cerrar imagen"
    >
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        class="h-6 w-6" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- Botones de navegación del lightbox -->
    <button 
      id="lightboxPrevButton"
      class="absolute left-4 top-1/2 -translate-y-1/2 p-3 rounded-full bg-black/50 hover:bg-black/75 transition-colors backdrop-blur-sm group z-10"
      aria-label="Imagen anterior"
    >
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        class="h-8 w-8 text-white group-hover:scale-110 transition-transform" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    <button 
      id="lightboxNextButton"
      class="absolute right-4 top-1/2 -translate-y-1/2 p-3 rounded-full bg-black/50 hover:bg-black/75 transition-colors backdrop-blur-sm group z-10"
      aria-label="Siguiente imagen"
    >
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        class="h-8 w-8 text-white group-hover:scale-110 transition-transform" 
        fill="none" 
        viewBox="0 0 24 24" 
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
    
    <div class="relative aspect-video w-full flex flex-col items-center justify-center">
      <img 
        id="lightboxImage" 
        src="" 
        alt="" 
        class="max-h-[80vh] max-w-[90vw] object-contain rounded-lg shadow-2xl transform scale-95 transition-all duration-300"
      >
      <div class="mt-4 text-center text-white">
        <h2 id="lightboxTitle" class="text-2xl font-bold mb-2"></h2>
        <p id="lightboxDescription" class="text-lg"></p>
      </div>
    </div>
  </div>
</div>

<script>
  const lightbox = document.getElementById('lightbox');
  const lightboxImage = document.getElementById('lightboxImage');
  const lightboxTitle = document.getElementById('lightboxTitle');
  const lightboxDescription = document.getElementById('lightboxDescription');
  const closeLightbox = document.getElementById('closeLightbox');
  const images = document.querySelectorAll('.group img');

  const slides = document.querySelectorAll('.snap-center');
  const indicators = document.querySelectorAll('[data-index]');
  let currentIndex = 0;

  function updateSlide(index: number) {
    slides[index].scrollIntoView({ behavior: 'smooth' });
    updateIndicators(index);
    currentIndex = index;
  }

  function updateIndicators(activeIndex: number) {
    indicators.forEach((indicator, i) => {
      indicator.classList.toggle('bg-white', i === activeIndex);
      indicator.classList.toggle('bg-white/30', i !== activeIndex);
    });
  }

  // Event listeners para los indicadores
  indicators.forEach((indicator) => {
    indicator.addEventListener('click', () => {
      const index = Number(indicator.getAttribute('data-index'));
      updateSlide(index);
    });
  });

  // Event listeners para los botones de navegación
  const prevButton = document.getElementById('prevButton');
  const nextButton = document.getElementById('nextButton');

  prevButton?.addEventListener('click', () => {
    const prevIndex = (currentIndex - 1 + slides.length) % slides.length;
    updateSlide(prevIndex);
  });

  nextButton?.addEventListener('click', () => {
    const nextIndex = (currentIndex + 1) % slides.length;
    updateSlide(nextIndex);
  });


  // Inicializar el primer indicador
  updateIndicators(0);

  // Add lightbox navigation buttons
  const lightboxPrevButton = document.getElementById('lightboxPrevButton');
  const lightboxNextButton = document.getElementById('lightboxNextButton');
  let currentLightboxIndex = 0;

  // Function to update lightbox content
  function updateLightboxContent(index: number) {
    if (lightboxImage && lightboxTitle && lightboxDescription) {
      currentLightboxIndex = index;
      
      // Get the hobby data for this index
      const container = slides[index].querySelector('.group');
      const img = container?.querySelector('img');
      const titleElement = container?.querySelector('h3');
      
      if (img) {
        // Update image
        (lightboxImage as HTMLImageElement).src = (img as HTMLImageElement).src;
        (lightboxImage as HTMLImageElement).alt = (img as HTMLImageElement).alt;
        
        // Update title and description
        lightboxTitle.textContent = titleElement ? titleElement.textContent : '';
        lightboxDescription.textContent = (img as HTMLImageElement).alt || '';
      }
    }
  }

  // Add click event to all images
  images.forEach((img, index) => {
    img.addEventListener('click', () => {
      if (lightbox && lightboxImage && lightboxTitle && lightboxDescription) {
        // Get the parent container to access the title
        const container = img.closest('.group');
        const titleElement = container?.querySelector('h3');
        const title = titleElement ? titleElement.textContent : '';
        
        // Set the image source and alt text
        (lightboxImage as HTMLImageElement).src = (img as HTMLImageElement).src;
        (lightboxImage as HTMLImageElement).alt = (img as HTMLImageElement).alt;
        
        // Set the title and description
        lightboxTitle.textContent = title || '';
        lightboxDescription.textContent = (img as HTMLImageElement).alt || '';
        
        // Store current index
        const slideContainer = img.closest('.snap-center');
        const slideIndex = Array.from(slides).indexOf(slideContainer as Element);
        currentLightboxIndex = slideIndex >= 0 ? slideIndex : 0;

        // Disable scrolling on body
        document.body.style.overflow = 'hidden';

        // Show lightbox
        lightbox.classList.remove('hidden');
        requestAnimationFrame(() => {
          lightbox.classList.add('flex');
          lightbox.classList.add('opacity-100');
          lightboxImage.classList.remove('scale-95');
        });
      }
    });
  });

  // Lightbox navigation
  lightboxPrevButton?.addEventListener('click', () => {
    const prevIndex = (currentLightboxIndex - 1 + slides.length) % slides.length;
    updateLightboxContent(prevIndex);
  });

  lightboxNextButton?.addEventListener('click', () => {
    const nextIndex = (currentLightboxIndex + 1) % slides.length;
    updateLightboxContent(nextIndex);
  });

  // Add keyboard navigation for lightbox
  document.addEventListener('keydown', (e) => {
    if (lightbox?.classList.contains('flex')) {
      if (e.key === 'ArrowLeft') {
        const prevIndex = (currentLightboxIndex - 1 + slides.length) % slides.length;
        updateLightboxContent(prevIndex);
      } else if (e.key === 'ArrowRight') {
        const nextIndex = (currentLightboxIndex + 1) % slides.length;
        updateLightboxContent(nextIndex);
      } else if (e.key === 'Escape') {
        closeLightboxHandler();
      }
    }
  });

  // Close lightbox when clicking the close button or outside the image
  closeLightbox?.addEventListener('click', closeLightboxHandler);
  lightbox?.addEventListener('click', (e) => {
    if (e.target === lightbox) {
      closeLightboxHandler();
    }
  });

  // Close with escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeLightboxHandler();
    }
  });

  function closeLightboxHandler() {
    if (lightbox && lightboxImage) {
      lightbox.classList.remove('opacity-100');
      lightboxImage.classList.add('scale-95');
      
      // Wait for animation to complete
      setTimeout(() => {
        lightbox.classList.remove('flex');
        lightbox.classList.add('hidden');
        
        // Re-enable scrolling on body
        document.body.style.overflow = 'auto';
      }, 300);
    }
  }
</script>